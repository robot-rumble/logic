type main_input = {
  p1_code : string;
  map_type : map_type;
}

type map_type = [ Rect | Circle ]
<ocaml repr="classic">

type main_output = {
  winner : string;
  turns : turn_state list;
}

type turn_state = {
  turn : int;
  objs : objs;
} <json adapter.ocaml="Json_adapter.Obj">

type additional_state = {
  teams : objs_by_team;
  map : objs_by_map;
}

type robot_input_state = {
  basic: turn_state;
  additional: additional_state;
} <json adapter.ocaml="Json_adapter.State">

type robot_input = {
  state : robot_input_state;
  team : team;
}

type robot_output = {
  actions : action_list;
}

type id = string

type objs = (id * obj) list <json repr="object">

type action_list = (id * action) list <json repr="object">

type team = string

type objs_by_team = (team * id list) list <json repr="object">

type objs_by_map = id nullable list <ocaml repr="array"> list <ocaml repr="array"> <json keep_nulls>

type coords = (int * int)

type basic_obj = {
  id : id;
  coords : coords;
}

type obj = (basic_obj * obj_details)

type obj_details = [ Terrain of terrain | Unit of unit_ ]
<ocaml repr="classic">

type terrain = {
  type_ : terrain_type;
}

type terrain_type = [ Wall ]
<ocaml repr="classic">

type unit_ = {
  type_ : unit_type;
  team : team;
  health : int;
}

type unit_type = [ Soldier ]
<ocaml repr="classic">

type action = {
  type_ : action_type;
  direction: direction;
}

type action_type = [ Move | Attack ]
<ocaml repr="classic">

type direction = [ Left | Right | Up | Down ]
<ocaml repr="classic">

